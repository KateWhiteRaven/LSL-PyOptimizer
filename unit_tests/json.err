PASSED! Type of string, expect=actual=u'\ufdd4'
PASSED! Type of string, unquoted, expect=actual=u'\ufdd0'
PASSED! Type of invalid, expect=actual=u'\ufdd0'
PASSED! Type of integer, expect=actual=u'\ufdd3'
PASSED! Type of float, expect=actual=u'\ufdd3'
PASSED! Type of Inf (is unsupported by JSON standard), expect=actual=u'\ufdd0'
PASSED! Type of NaN (is unsupported by JSON standard), expect=actual=u'\ufdd0'
PASSED! Type of number, expect=actual=u'\ufdd3'
PASSED! Type of object, expect=actual=u'\ufdd1'
PASSED! Type of object, invalid/unquoted key, expect=actual=u'\ufdd1'
PASSED! Type of object, invalid/unquoted value, expect=actual=u'\ufdd1'
PASSED! Type of array, expect=actual=u'\ufdd2'
PASSED! Type of array padded front, expect=actual=u'\ufdd2'
PASSED! Type of array padded back, expect=actual=u'\ufdd2'
PASSED! Type of array padded, expect=actual=u'\ufdd2'
PASSED! Type of true, expect=actual=u'\ufdd6'
PASSED! Type of false, expect=actual=u'\ufdd7'
PASSED! Type of null, expect=actual=u'\ufdd5'
PASSED! Type of [0], expect=actual=u'\ufdd2'
PASSED! Type of [0,1], expect=actual=u'\ufdd3'
PASSED! Type of [1], expect=actual=u'\ufdd1'
PASSED! Type of [1,"b"], expect=actual=u'\ufdd2'
PASSED! Type of [1,"b",0], expect=actual=u'\ufdd6'
PASSED! Type of [1,"b",1], expect=actual=u'\ufdd4'
PASSED! Type of [1,"b",2], expect=actual=u'\ufdd3'
PASSED! Type of [1,"c"], expect=actual=u'\ufdd4'
PASSED! Type of [1,"d"], expect=actual=u'\ufdd7'
PASSED! Type of [3] (invalid index at level 0), expect=actual=u'\ufdd0'
PASSED! Type of [-1] (invalid index at level 0), expect=actual=u'\ufdd0'
PASSED! Type of [1,"c",3] (invalid index at level 1), MAINT-2670, expect=actual=u'\ufdd0'
PASSED! Type of [1,"c",0] (first element of non-nested object), expect=actual=u'\ufdd0'
PASSED! Type of [1,"b",3] (invalid index at level 2), expect=actual=u'\ufdd0'
PASSED! Type of [1,"b",2,0,1] (invalid index at level 3) MAINT-2670, expect=actual=u'\ufdd0'
PASSED! Type of [1,"a"] where key is unquoted, expect=actual=u'\ufdd0'
PASSED! Type of [1,"b"] where key is unquoted, expect=actual=u'\ufdd0'
PASSED! Type of [1,"c"] where key is unquoted, expect=actual=u'\ufdd0'
PASSED! llJsonGetValue [0], expect=actual=u'[1,2,3,4.0]'
PASSED! llJsonGetValue [0,1], expect=actual=u'2'
PASSED! llJsonGetValue [1], expect=actual=u'{"a":3,"b":[true,"test",6]}'
PASSED! llJsonGetValue [1,"b"], expect=actual=u'[true,"test",6]'
PASSED! llJsonGetValue [1,"b",0], expect=actual=u'\ufdd6'
PASSED! llJsonGetValue [1,"b",1], expect=actual=u'test'
PASSED! llJsonGetValue [1,"b",2], expect=actual=u'6'
PASSED! llJsonGetValue [0,3], expect=actual=u'4.0'
PASSED! llJsonGetValue [2] (invalid index at level 0), expect=actual=u'\ufdd0'
PASSED! llJsonGetValue [-1] (invalid index at level 0), expect=actual=u'\ufdd0'
PASSED! llJsonGetValue [0,4] (invalid index within array), expect=actual=u'\ufdd0'
PASSED! llJsonGetValue ["f"] (look for missing object within array, depth=0) MAINT-2671, expect=actual=u'\ufdd0'
PASSED! llJsonGetValue [0,"f"] (look for missing object within array, depth=1) MAINT-2671, expect=actual=u'\ufdd0'
PASSED! llJsonGetValue [1,2] (specify index within object - disallowed), expect=actual=u'\ufdd0'
PASSED! llJsonGetValue [1,"b",1], unquoted/invalid string value, expect=actual=u'\ufdd0'
PASSED! llJsonGetValue [1,"a"], unquoted/invalid string for key, expect=actual=u'\ufdd0'
Test failed: llJsonSetValue build json
Actual: u'***'
Expect: u'[[1]]'
Test failed: llJsonSetValue build json
Actual: u'***'
Expect: u'[[1,2]]'
Test failed: llJsonSetValue build json
Actual: u'***'
Expect: u'[[1,2,3]]'
Test failed: llJsonSetValue build json
Actual: u'***'
Expect: u'[[1,2,3],{"a":3}]'
Test failed: llJsonSetValue build json
Actual: u'***'
Expect: u'[[1,2,3],{"a":3,"b":[true]}]'
Test failed: llJsonSetValue build json
Actual: u'***'
Expect: u'[[1,2,3],{"a":3,"b":[true,"test"]}]'
Test failed: llJsonSetValue completed json
Actual: u'***'
Expect: u'[[1,2,3],{"a":3,"b":[true,"test",6]}]'
Test failed: llJsonSetValue completed json
Actual: u'***'
Expect: u'[[1,2,3],{"a":3,"b":[true,"foo",6]}]'
Test failed: llJsonSetValue completed json, true
Actual: u'***'
Expect: u'[[1,2,3],{"a":3,"b":true}]'
Test failed: llJsonSetValue completed json, alt true
Actual: u'***'
Expect: u'[[1,2,3],{"a":3,"b":true}]'
Test failed: llJsonSetValue completed json
Actual: u'***'
Expect: u'[[1,2,3],[[false]]]'
Test failed: llJsonSetValue append to first array
Actual: u'***'
Expect: u'[[1,2,3,4.0],{"a":3,"b":[true,"test",6]}]'
Test failed: llJsonSetValue append to array withhin object
Actual: u'***'
Expect: u'[[1,2,3,4.0],{"a":3,"b":[true,"test",6,5.0]}]'
Test failed: llJsonSetValue append to outer array
Actual: u'***'
Expect: u'[[1,2,3,4.0],{"a":3,"b":[true,"test",6,5.0]},6.0]'
Test failed: llJsonSetValue append to empty array (MAINT-2684)
Actual: u'***'
Expect: u'["alone"]'
Test failed: llJsonSetValue append to empty array at invalid index (MAINT-2684)
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue append to empty array at first index (MAINT-2684)
Actual: u'***'
Expect: u'["alone"]'
Test failed: llJsonSetValue deleting string in middle of array
Actual: u'***'
Expect: u'[[1,2,3],{"a":3,"b":[true,6,null]}]'
Test failed: llJsonSetValue deleting null at end of array
Actual: u'***'
Expect: u'[[1,2,3],{"a":3,"b":[true,6]}]'
Test failed: llJsonSetValue deleting key-value
Actual: u'***'
Expect: u'[[1,2,3],{"a":3}]'
Test failed: llJsonSetValue deleting object in array
Actual: u'***'
Expect: u'[[1,2,3]]'
Test failed: llJsonSetValue deleting array (which is first index in array)
Actual: u'***'
Expect: u'[4]'
Test failed: llJsonSetValue deleting last element in array
Actual: u'***'
Expect: u'[]'
Test failed: llJsonSetValue deleting last element in array
Actual: u'***'
Expect: u'[[]]'
Test failed: llJsonSetValue deleting array within array
Actual: u'***'
Expect: u'[]'
Test failed: llJsonSetValue deleting undefined key-value in object
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue deleting out-of-range index in array
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue deleting depth within object that doesn't exist
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue deleting depth within array that doesn't exist
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue fail to insert data into invalid array index (MAINT-2675)
Actual: u'***'
Expect: u'\ufdd0'
PASSED! llJson2List first, expect=actual='[u\'[1,2,3]\', u\'{"a":3,"b":[true,"test",6]}\']'
PASSED! llJson2List l,0, expect=actual='[1, 2, 3]'
PASSED! llJson2List l,1, expect=actual='[u\'a\', 3, u\'b\', u\'[true,"test",6]\']'
PASSED! llJson2List n,3, expect=actual="[u'\\ufdd6', u'test', 6]"
PASSED! llJson2List n,1, expect=actual="[u'test']"
PASSED! Empty JSON string becomes empty list, expect=actual='[]'
PASSED! Empty JSON array becomes empty list (MAINT-2678), expect=actual='[]'
PASSED! Empty JSON object becomes empty list (MAINT-2678), expect=actual='[]'
PASSED! llJson2List for non-JSON string is stored as a single object, expect=actual="[u'Non-JSON string, with comma']"
PASSED! llJson2List, malformed input, expect=actual="[u'[malformed}']"
PASSED! llList2Json, json object, expect=actual=u'{"a":1,"b":2.500000,"c":"test","d":true,"e":[1,2,3]}'
PASSED! llList2Json, json array, expect=actual=u'[1,2.500000,"test",true,[1,2,3]]'
PASSED! llList2Json, json array, alternative true representation, expect=actual=u'[1,2.500000,"test",true,[1,2,3]]'
PASSED! llList2Json, json object with empty input (MAINT-2681), expect=actual=u'{}'
PASSED! llList2Json, json array with empty input (MAINT-2681), expect=actual=u'[]'
PASSED! llList2Json, json object, truncated, expect=actual=u'\ufdd0'
PASSED! llList2Json, json object, non-string in one of the first stride values, expect=actual=u'\ufdd0'
PASSED! llList2Json, json invalid type, expect=actual=u'\ufdd0'
PASSED! Type of string with escaped char (for MAINT-2698), 'quote in middle', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funky\"string"] (for MAINT-2698), 'quote in middle', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'quote in middle', expect=actual=u'funky"stringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'quote in middle'
Actual: u'***'
Expect: u'["funky\\"string",{"funky\\"string":3,"b":"funky\\"stringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'quote in middle'
Actual: u'***'
Expect: u'["funky\\"string",{"funky\\"string":3,"b":"funky\\"stringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'quote in middle'
Actual: u'***'
Expect: u'[{"funky\\"string":"funky\\"stringvalue"},{"funky\\"string":3,"b":"funky\\"stringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'quote in middle'
Actual: "[u'***']"
Expect: '[u\'{"funky\\\\"string":"funky\\\\"stringvalue"}\', u\'{"funky\\\\"string":3,"b":"funky\\\\"stringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'quote in middle'
Actual: "[u'***']"
Expect: '[u\'funky"string\', u\'funky"stringvalue\']'
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'quote in middle'
Actual: u'["***"]'
Expect: u'["funky\\"string","funky\\"stringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'quote in middle'
Actual: u'{}'
Expect: u'{"funky\\"string":"funky\\"stringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'quote in middle, other position', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funkystr\"ing"] (for MAINT-2698), 'quote in middle, other position', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'quote in middle, other position', expect=actual=u'funkystr"ingvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'quote in middle, other position'
Actual: u'***'
Expect: u'["funkystr\\"ing",{"funkystr\\"ing":3,"b":"funkystr\\"ingvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'quote in middle, other position'
Actual: u'***'
Expect: u'["funkystr\\"ing",{"funkystr\\"ing":3,"b":"funkystr\\"ingvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'quote in middle, other position'
Actual: u'***'
Expect: u'[{"funkystr\\"ing":"funkystr\\"ingvalue"},{"funkystr\\"ing":3,"b":"funkystr\\"ingvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'quote in middle, other position'
Actual: "[u'***']"
Expect: '[u\'{"funkystr\\\\"ing":"funkystr\\\\"ingvalue"}\', u\'{"funkystr\\\\"ing":3,"b":"funkystr\\\\"ingvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'quote in middle, other position'
Actual: "[u'***']"
Expect: '[u\'funkystr"ing\', u\'funkystr"ingvalue\']'
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'quote in middle, other position'
Actual: u'["***"]'
Expect: u'["funkystr\\"ing","funkystr\\"ingvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'quote in middle, other position'
Actual: u'{}'
Expect: u'{"funkystr\\"ing":"funkystr\\"ingvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'backslashes in middle', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funky\\string"] (for MAINT-2698), 'backslashes in middle', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'backslashes in middle', expect=actual=u'funky\\stringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'backslashes in middle'
Actual: u'***'
Expect: u'["funky\\\\string",{"funky\\\\string":3,"b":"funky\\\\stringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'backslashes in middle'
Actual: u'***'
Expect: u'["funky\\\\string",{"funky\\\\string":3,"b":"funky\\\\stringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'backslashes in middle'
Actual: u'***'
Expect: u'[{"funky\\\\string":"funky\\\\stringvalue"},{"funky\\\\string":3,"b":"funky\\\\stringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'backslashes in middle'
Actual: "[u'***']"
Expect: '[u\'{"funky\\\\\\\\string":"funky\\\\\\\\stringvalue"}\', u\'{"funky\\\\\\\\string":3,"b":"funky\\\\\\\\stringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'backslashes in middle'
Actual: "[u'***']"
Expect: "[u'funky\\\\string', u'funky\\\\stringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'backslashes in middle'
Actual: u'["***"]'
Expect: u'["funky\\\\string","funky\\\\stringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'backslashes in middle'
Actual: u'{}'
Expect: u'{"funky\\\\string":"funky\\\\stringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'backslashes at beginning', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"\\funkystring"] (for MAINT-2698), 'backslashes at beginning', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'backslashes at beginning', expect=actual=u'\\funkystringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'backslashes at beginning'
Actual: u'***'
Expect: u'["\\\\funkystring",{"\\\\funkystring":3,"b":"\\\\funkystringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'backslashes at beginning'
Actual: u'***'
Expect: u'["\\\\funkystring",{"\\\\funkystring":3,"b":"\\\\funkystringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'backslashes at beginning'
Actual: u'***'
Expect: u'[{"\\\\funkystring":"\\\\funkystringvalue"},{"\\\\funkystring":3,"b":"\\\\funkystringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'backslashes at beginning'
Actual: "[u'***']"
Expect: '[u\'{"\\\\\\\\funkystring":"\\\\\\\\funkystringvalue"}\', u\'{"\\\\\\\\funkystring":3,"b":"\\\\\\\\funkystringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'backslashes at beginning'
Actual: "[u'***']"
Expect: "[u'\\\\funkystring', u'\\\\funkystringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'backslashes at beginning'
Actual: u'["***"]'
Expect: u'["\\\\funkystring","\\\\funkystringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'backslashes at beginning'
Actual: u'{}'
Expect: u'{"\\\\funkystring":"\\\\funkystringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'newline in string', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funky\nstring"] (for MAINT-2698), 'newline in string', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'newline in string', expect=actual=u'funky\nstringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'newline in string'
Actual: u'***'
Expect: u'["funky\\nstring",{"funky\\nstring":3,"b":"funky\\nstringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'newline in string'
Actual: u'***'
Expect: u'["funky\\nstring",{"funky\\nstring":3,"b":"funky\\nstringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'newline in string'
Actual: u'***'
Expect: u'[{"funky\\nstring":"funky\\nstringvalue"},{"funky\\nstring":3,"b":"funky\\nstringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'newline in string'
Actual: "[u'***']"
Expect: '[u\'{"funky\\\\nstring":"funky\\\\nstringvalue"}\', u\'{"funky\\\\nstring":3,"b":"funky\\\\nstringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'newline in string'
Actual: "[u'***']"
Expect: "[u'funky\\nstring', u'funky\\nstringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'newline in string'
Actual: u'["***"]'
Expect: u'["funky\\nstring","funky\\nstringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'newline in string'
Actual: u'{}'
Expect: u'{"funky\\nstring":"funky\\nstringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'forward slash in string', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funky\/string"] (for MAINT-2698), 'forward slash in string', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'forward slash in string', expect=actual=u'funky/stringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'forward slash in string'
Actual: u'***'
Expect: u'["funky\\/string",{"funky\\/string":3,"b":"funky\\/stringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'forward slash in string'
Actual: u'***'
Expect: u'["funky\\/string",{"funky\\/string":3,"b":"funky\\/stringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'forward slash in string'
Actual: u'***'
Expect: u'[{"funky\\/string":"funky\\/stringvalue"},{"funky\\/string":3,"b":"funky\\/stringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'forward slash in string'
Actual: "[u'***']"
Expect: '[u\'{"funky\\\\/string":"funky\\\\/stringvalue"}\', u\'{"funky\\\\/string":3,"b":"funky\\\\/stringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'forward slash in string'
Actual: "[u'***']"
Expect: "[u'funky/string', u'funky/stringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'forward slash in string'
Actual: u'["***"]'
Expect: u'["funky\\/string","funky\\/stringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'forward slash in string'
Actual: u'{}'
Expect: u'{"funky\\/string":"funky\\/stringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'tab in string', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funky\tstring"] (for MAINT-2698), 'tab in string', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'tab in string', expect=actual=u'funky\tstringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'tab in string'
Actual: u'***'
Expect: u'["funky\\tstring",{"funky\\tstring":3,"b":"funky\\tstringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'tab in string'
Actual: u'***'
Expect: u'["funky\\tstring",{"funky\\tstring":3,"b":"funky\\tstringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'tab in string'
Actual: u'***'
Expect: u'[{"funky\\tstring":"funky\\tstringvalue"},{"funky\\tstring":3,"b":"funky\\tstringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'tab in string'
Actual: "[u'***']"
Expect: '[u\'{"funky\\\\tstring":"funky\\\\tstringvalue"}\', u\'{"funky\\\\tstring":3,"b":"funky\\\\tstringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'tab in string'
Actual: "[u'***']"
Expect: "[u'funky\\tstring', u'funky\\tstringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'tab in string'
Actual: u'["***"]'
Expect: u'["funky\\tstring","funky\\tstringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'tab in string'
Actual: u'{}'
Expect: u'{"funky\\tstring":"funky\\tstringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'backspace in middle', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funky\bstring"] (for MAINT-2698), 'backspace in middle', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'backspace in middle', expect=actual=u'funky\x08stringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'backspace in middle'
Actual: u'***'
Expect: u'["funky\\bstring",{"funky\\bstring":3,"b":"funky\\bstringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'backspace in middle'
Actual: u'***'
Expect: u'["funky\\bstring",{"funky\\bstring":3,"b":"funky\\bstringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'backspace in middle'
Actual: u'***'
Expect: u'[{"funky\\bstring":"funky\\bstringvalue"},{"funky\\bstring":3,"b":"funky\\bstringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'backspace in middle'
Actual: "[u'***']"
Expect: '[u\'{"funky\\\\bstring":"funky\\\\bstringvalue"}\', u\'{"funky\\\\bstring":3,"b":"funky\\\\bstringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'backspace in middle'
Actual: "[u'***']"
Expect: "[u'funky\\x08string', u'funky\\x08stringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'backspace in middle'
Actual: u'["***"]'
Expect: u'["funky\\bstring","funky\\bstringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'backspace in middle'
Actual: u'{}'
Expect: u'{"funky\\bstring":"funky\\bstringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'form feed in middle', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funky\fstring"] (for MAINT-2698), 'form feed in middle', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'form feed in middle', expect=actual=u'funky\x0cstringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'form feed in middle'
Actual: u'***'
Expect: u'["funky\\fstring",{"funky\\fstring":3,"b":"funky\\fstringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'form feed in middle'
Actual: u'***'
Expect: u'["funky\\fstring",{"funky\\fstring":3,"b":"funky\\fstringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'form feed in middle'
Actual: u'***'
Expect: u'[{"funky\\fstring":"funky\\fstringvalue"},{"funky\\fstring":3,"b":"funky\\fstringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'form feed in middle'
Actual: "[u'***']"
Expect: '[u\'{"funky\\\\fstring":"funky\\\\fstringvalue"}\', u\'{"funky\\\\fstring":3,"b":"funky\\\\fstringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'form feed in middle'
Actual: "[u'***']"
Expect: "[u'funky\\x0cstring', u'funky\\x0cstringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'form feed in middle'
Actual: u'["***"]'
Expect: u'["funky\\fstring","funky\\fstringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'form feed in middle'
Actual: u'{}'
Expect: u'{"funky\\fstring":"funky\\fstringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'carriage return in string', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"funky\rstring"] (for MAINT-2698), 'carriage return in string', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'carriage return in string', expect=actual=u'funky\rstringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'carriage return in string'
Actual: u'***'
Expect: u'["funky\\rstring",{"funky\\rstring":3,"b":"funky\\rstringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'carriage return in string'
Actual: u'***'
Expect: u'["funky\\rstring",{"funky\\rstring":3,"b":"funky\\rstringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'carriage return in string'
Actual: u'***'
Expect: u'[{"funky\\rstring":"funky\\rstringvalue"},{"funky\\rstring":3,"b":"funky\\rstringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'carriage return in string'
Actual: "[u'***']"
Expect: '[u\'{"funky\\\\rstring":"funky\\\\rstringvalue"}\', u\'{"funky\\\\rstring":3,"b":"funky\\\\rstringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'carriage return in string'
Actual: "[u'***']"
Expect: "[u'funky\\rstring', u'funky\\rstringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'carriage return in string'
Actual: u'["***"]'
Expect: u'["funky\\rstring","funky\\rstringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'carriage return in string'
Actual: u'{}'
Expect: u'{"funky\\rstring":"funky\\rstringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'quote in beginning', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"\"funkystring"] (for MAINT-2698), 'quote in beginning', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'quote in beginning', expect=actual=u'"funkystringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'quote in beginning'
Actual: u'***'
Expect: u'["\\"funkystring",{"\\"funkystring":3,"b":"\\"funkystringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'quote in beginning'
Actual: u'***'
Expect: u'["\\"funkystring",{"\\"funkystring":3,"b":"\\"funkystringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'quote in beginning'
Actual: u'***'
Expect: u'[{"\\"funkystring":"\\"funkystringvalue"},{"\\"funkystring":3,"b":"\\"funkystringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'quote in beginning'
Actual: "[u'***']"
Expect: '[u\'{"\\\\"funkystring":"\\\\"funkystringvalue"}\', u\'{"\\\\"funkystring":3,"b":"\\\\"funkystringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'quote in beginning'
Actual: "[u'***']"
Expect: '[u\'"funkystring\', u\'"funkystringvalue\']'
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'quote in beginning'
Actual: u'["***"]'
Expect: u'["\\"funkystring","\\"funkystringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'quote in beginning'
Actual: u'{}'
Expect: u'{"\\"funkystring":"\\"funkystringvalue"}'
PASSED! Type of string with escaped char (for MAINT-2698), 'nothing that needs to be escaped..', expect=actual=u'\ufdd4'
PASSED! llJsonGetValue [1,"vanilla string"] (for MAINT-2698), 'nothing that needs to be escaped..', expect=actual='3'
PASSED! llJsonGetValue [1,"b"] (for MAINT-2698), 'nothing that needs to be escaped..', expect=actual=u'vanilla stringvalue'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'nothing that needs to be escaped..'
Actual: u'***'
Expect: u'["vanilla string",{"vanilla string":3,"b":"vanilla stringvalue"}]'
Test failed: llJsonSetValue with escaped string as value (for MAINT-2698), 'nothing that needs to be escaped..'
Actual: u'***'
Expect: u'["vanilla string",{"vanilla string":3,"b":"vanilla stringvalue"}]'
Test failed: llJsonSetValue with escaped string as key's value (for MAINT-2698), 'nothing that needs to be escaped..'
Actual: u'***'
Expect: u'[{"vanilla string":"vanilla stringvalue"},{"vanilla string":3,"b":"vanilla stringvalue"}]'
Test failed: llJson2List extracting object containing escaped string (for MAINT-2698), 'nothing that needs to be escaped..'
Actual: "[u'***']"
Expect: '[u\'{"vanilla string":"vanilla stringvalue"}\', u\'{"vanilla string":3,"b":"vanilla stringvalue"}\']'
Test failed: llJson2List extracting escaped strings (for MAINT-2698), 'nothing that needs to be escaped..'
Actual: "[u'***']"
Expect: "[u'vanilla string', u'vanilla stringvalue']"
Test failed: llList2Json from escaped-containing string to array (for MAINT-2698), 'nothing that needs to be escaped..'
Actual: u'["***"]'
Expect: u'["vanilla string","vanilla stringvalue"]'
Test failed: llList2Json from escaped-containing string to object (for MAINT-2698), 'nothing that needs to be escaped..'
Actual: u'{}'
Expect: u'{"vanilla string":"vanilla stringvalue"}'
Test failed: Set value 'messa[g]e'
Actual: u'***'
Expect: u'{"toast":"messa[g]e"}'
Test failed: Set value 'messag[e]'
Actual: u'***'
Expect: u'{"toast":"messag[e]"}'
Test failed: Set value 'messag\[e\]'
Actual: u'***'
Expect: u'{"toast":"messag\\\\[e\\\\]"}'
Test failed: Valid json number with + before exponent
Actual: u'\ufdd0'
Expect: u'\ufdd3'
PASSED! Valid json number with - before exponent, expect=actual=u'\ufdd3'
PASSED! Valid json number with - before exponent and mantissa, expect=actual=u'\ufdd3'
PASSED! Valid json number with unsigned exponent, expect=actual=u'\ufdd3'
PASSED! Invalid json number due to + before mantissa, expect=actual=u'\ufdd0'
Test failed: Invalid json number due to leading e
Actual: u'\ufdd3'
Expect: u'\ufdd0'
Test failed: Invalid json number due to leading 0
Actual: u'\ufdd3'
Expect: u'\ufdd0'
Test failed: Invalid json number due to leading -0
Actual: u'\ufdd3'
Expect: u'\ufdd0'
PASSED! Valid json number with 0 immediately before ., expect=actual=u'\ufdd3'
PASSED! Valid json number with -0 immediately before ., expect=actual=u'\ufdd3'
Test failed: llJsonSetValue(jT1,[2],"t")
Actual: u'***'
Expect: u'[1,2,"t"]'
Test failed: llJsonSetValue(jT1,[3],"t")
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue(jT1,[0, 0],"t")
Actual: u'***'
Expect: u'[["t"],2]'
Test failed: llJsonSetValue(jT1,[0, 0, 2, "t", 75],"t")
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue(jT1,[0, 1],"t")
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue(jT1,[0, 1, 2, "t", 75],"t")
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue(jT2,[0, 3],"t")
Actual: u'***'
Expect: u'[["A","B","C","t"],2]'
Test failed: llJsonSetValue(jT2,[0, 4],"t")
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue(jT2,[0, 1, 0],"t")
Actual: u'***'
Expect: u'[["A",["t"],"C"],2]'
Test failed: llJsonSetValue(jT2,[0, 1, 1],"t")
Actual: u'***'
Expect: u'\ufdd0'
Test failed: llJsonSetValue(jT3,["1"],"t")
Actual: u'***'
Expect: u'{"1":"t"}'
Test failed: llJsonSetValue(jT3,["1",0],"t")
Actual: u'***'
Expect: u'{"1":["t"]}'
Test failed: llJsonSetValue(jT3,["1",1],"t")
Actual: u'***'
Expect: u'\ufdd0'
PASSED! llJsonValueType(jGood, [0]), expect=actual=u'\ufdd5'
PASSED! llJsonValueType(jGood, [0, 0]), expect=actual=u'\ufdd0'
PASSED! llJsonValueType(jBad,[0]), expect=actual=u'\ufdd0'
PASSED! llJsonValueType(jBad,[0, 0, 2, "t", 75]), expect=actual=u'\ufdd0'
PASSED! llJsonGetValue(jBad,[1, 0, 2, "t", 75]), expect=actual=u'\ufdd0'
Test failed: llJsonSetValue blank string
Actual: u'***'
Expect: u'{"test":""}'
Test failed: llJsonSetValue JSON_NULL
Actual: u'***'
Expect: u'{"test":null}'
PASSED! llJsonGetValue blank string, expect=actual=u''
PASSED! llJsonGetValue JSON_NULL, expect=actual=u'\ufdd5'
Test failed: Identity (set->get) blank string
Actual: u'\ufdd0'
Expect: u''
Test failed: Identity (set->get) JSON_NULL
Actual: u'\ufdd0'
Expect: u'\ufdd5'
Number of tests: 257; passed: 119; failed: 138
(138 failures expected)
